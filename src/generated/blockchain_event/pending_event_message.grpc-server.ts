// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "blockchain_event/pending_event_message.proto" (package "pending_event_message", syntax proto3)
// tslint:disable
import { PendingExpiredEventResponse } from "./pending_event_message";
import { PendingExpiredEventRequest } from "./pending_event_message";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service pending_event_message.PendingEventService
 */
export interface IPendingEventService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: ReportPendingExpiredEvent
     */
    reportPendingExpiredEvent: grpc.handleUnaryCall<PendingExpiredEventRequest, PendingExpiredEventResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service pending_event_message.PendingEventService.
 *
 * Usage: Implement the interface IPendingEventService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IPendingEventService = ...
 * server.addService(pendingEventServiceDefinition, service);
 * ```
 */
export const pendingEventServiceDefinition: grpc.ServiceDefinition<IPendingEventService> = {
    reportPendingExpiredEvent: {
        path: "/pending_event_message.PendingEventService/ReportPendingExpiredEvent",
        originalName: "ReportPendingExpiredEvent",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PendingExpiredEventResponse.fromBinary(bytes),
        requestDeserialize: bytes => PendingExpiredEventRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PendingExpiredEventResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(PendingExpiredEventRequest.toBinary(value))
    }
};
