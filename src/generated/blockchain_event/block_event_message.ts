// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "blockchain_event/block_event_message.proto" (package "block_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message block_event_message.ReportBlockCreatedEventRequest
 */
export interface ReportBlockCreatedEventRequest {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
    /**
     * @generated from protobuf field: uint32 transaction_count = 2
     */
    transactionCount: number;
    /**
     * @generated from protobuf field: uint32 height = 3
     */
    height: number;
}
/**
 * @generated from protobuf message block_event_message.ReportBlockCreatedEventResponse
 */
export interface ReportBlockCreatedEventResponse {
    /**
     * @generated from protobuf field: bool cached = 1
     */
    cached: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ReportBlockCreatedEventRequest$Type extends MessageType<ReportBlockCreatedEventRequest> {
    constructor() {
        super("block_event_message.ReportBlockCreatedEventRequest", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transaction_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReportBlockCreatedEventRequest>): ReportBlockCreatedEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.transactionCount = 0;
        message.height = 0;
        if (value !== undefined)
            reflectionMergePartial<ReportBlockCreatedEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportBlockCreatedEventRequest): ReportBlockCreatedEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* uint32 transaction_count */ 2:
                    message.transactionCount = reader.uint32();
                    break;
                case /* uint32 height */ 3:
                    message.height = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportBlockCreatedEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* uint32 transaction_count = 2; */
        if (message.transactionCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.transactionCount);
        /* uint32 height = 3; */
        if (message.height !== 0)
            writer.tag(3, WireType.Varint).uint32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message block_event_message.ReportBlockCreatedEventRequest
 */
export const ReportBlockCreatedEventRequest = new ReportBlockCreatedEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportBlockCreatedEventResponse$Type extends MessageType<ReportBlockCreatedEventResponse> {
    constructor() {
        super("block_event_message.ReportBlockCreatedEventResponse", [
            { no: 1, name: "cached", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportBlockCreatedEventResponse>): ReportBlockCreatedEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cached = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<ReportBlockCreatedEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportBlockCreatedEventResponse): ReportBlockCreatedEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool cached */ 1:
                    message.cached = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportBlockCreatedEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool cached = 1; */
        if (message.cached !== false)
            writer.tag(1, WireType.Varint).bool(message.cached);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message block_event_message.ReportBlockCreatedEventResponse
 */
export const ReportBlockCreatedEventResponse = new ReportBlockCreatedEventResponse$Type();
/**
 * @generated ServiceType for protobuf service block_event_message.BlockEventService
 */
export const BlockEventService = new ServiceType("block_event_message.BlockEventService", [
    { name: "ReportBlockCreatedEvent", options: {}, I: ReportBlockCreatedEventRequest, O: ReportBlockCreatedEventResponse }
]);
