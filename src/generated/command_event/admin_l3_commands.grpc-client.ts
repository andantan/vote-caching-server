// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "command_event/admin_l3_commands.proto" (package "admin_l3_commands", syntax proto3)
// tslint:disable
import { L3Commands } from "./admin_l3_commands";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { L3HealthCheckResponse } from "./admin_l3_commands";
import type { L3HealthCheckRequest } from "./admin_l3_commands";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service admin_l3_commands.L3Commands
 */
export interface IL3CommandsClient {
    /**
     * @generated from protobuf rpc: CheckHealth
     */
    checkHealth(input: L3HealthCheckRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void): grpc.ClientUnaryCall;
    checkHealth(input: L3HealthCheckRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void): grpc.ClientUnaryCall;
    checkHealth(input: L3HealthCheckRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void): grpc.ClientUnaryCall;
    checkHealth(input: L3HealthCheckRequest, callback: (err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service admin_l3_commands.L3Commands
 */
export class L3CommandsClient extends grpc.Client implements IL3CommandsClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: CheckHealth
     */
    checkHealth(input: L3HealthCheckRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: L3HealthCheckResponse) => void)): grpc.ClientUnaryCall {
        const method = L3Commands.methods[0];
        return this.makeUnaryRequest<L3HealthCheckRequest, L3HealthCheckResponse>(`/${L3Commands.typeName}/${method.name}`, (value: L3HealthCheckRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): L3HealthCheckResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
