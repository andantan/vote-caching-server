// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "command_event/admin_l3_commands.proto" (package "admin_L3_commands", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message admin_L3_commands.L3HealthCheckRequest
 */
export interface L3HealthCheckRequest {
    /**
     * @generated from protobuf field: string ping = 1
     */
    ping: string;
}
/**
 * @generated from protobuf message admin_L3_commands.L3HealthCheckResponse
 */
export interface L3HealthCheckResponse {
    /**
     * @generated from protobuf field: bool connected = 1
     */
    connected: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
    /**
     * @generated from protobuf field: string pong = 3
     */
    pong: string;
    /**
     * @generated from protobuf field: string ip = 4
     */
    ip: string;
    /**
     * @generated from protobuf field: repeated uint32 ports = 5
     */
    ports: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class L3HealthCheckRequest$Type extends MessageType<L3HealthCheckRequest> {
    constructor() {
        super("admin_L3_commands.L3HealthCheckRequest", [
            { no: 1, name: "ping", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<L3HealthCheckRequest>): L3HealthCheckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ping = "";
        if (value !== undefined)
            reflectionMergePartial<L3HealthCheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: L3HealthCheckRequest): L3HealthCheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ping */ 1:
                    message.ping = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: L3HealthCheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ping = 1; */
        if (message.ping !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin_L3_commands.L3HealthCheckRequest
 */
export const L3HealthCheckRequest = new L3HealthCheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class L3HealthCheckResponse$Type extends MessageType<L3HealthCheckResponse> {
    constructor() {
        super("admin_L3_commands.L3HealthCheckResponse", [
            { no: 1, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pong", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ports", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<L3HealthCheckResponse>): L3HealthCheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.connected = false;
        message.status = "";
        message.pong = "";
        message.ip = "";
        message.ports = [];
        if (value !== undefined)
            reflectionMergePartial<L3HealthCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: L3HealthCheckResponse): L3HealthCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool connected */ 1:
                    message.connected = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* string pong */ 3:
                    message.pong = reader.string();
                    break;
                case /* string ip */ 4:
                    message.ip = reader.string();
                    break;
                case /* repeated uint32 ports */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ports.push(reader.uint32());
                    else
                        message.ports.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: L3HealthCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool connected = 1; */
        if (message.connected !== false)
            writer.tag(1, WireType.Varint).bool(message.connected);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* string pong = 3; */
        if (message.pong !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pong);
        /* string ip = 4; */
        if (message.ip !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ip);
        /* repeated uint32 ports = 5; */
        if (message.ports.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ports.length; i++)
                writer.uint32(message.ports[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin_L3_commands.L3HealthCheckResponse
 */
export const L3HealthCheckResponse = new L3HealthCheckResponse$Type();
/**
 * @generated ServiceType for protobuf service admin_L3_commands.L3Commands
 */
export const L3Commands = new ServiceType("admin_L3_commands.L3Commands", [
    { name: "CheckHealth", options: {}, I: L3HealthCheckRequest, O: L3HealthCheckResponse }
]);
