// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "web_event/proposal_create_event_message.proto" (package "proposal_create_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message proposal_create_event_message.ProposalValidateEventRequest
 */
export interface ProposalValidateEventRequest {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
}
/**
 * @generated from protobuf message proposal_create_event_message.ProposalValidateEventResponse
 */
export interface ProposalValidateEventResponse {
    /**
     * @generated from protobuf field: bool validation = 1
     */
    validation: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
}
/**
 * @generated from protobuf message proposal_create_event_message.ProposalCacheEventRequest
 */
export interface ProposalCacheEventRequest {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
    /**
     * @generated from protobuf field: string proposer = 2
     */
    proposer: string;
    /**
     * @generated from protobuf field: uint32 duration = 3
     */
    duration: number;
    /**
     * @generated from protobuf field: repeated string options = 4
     */
    options: string[];
}
/**
 * @generated from protobuf message proposal_create_event_message.ProposalCacheEventResponse
 */
export interface ProposalCacheEventResponse {
    /**
     * @generated from protobuf field: bool cached = 1
     */
    cached: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ProposalValidateEventRequest$Type extends MessageType<ProposalValidateEventRequest> {
    constructor() {
        super("proposal_create_event_message.ProposalValidateEventRequest", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProposalValidateEventRequest>): ProposalValidateEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<ProposalValidateEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProposalValidateEventRequest): ProposalValidateEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProposalValidateEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_create_event_message.ProposalValidateEventRequest
 */
export const ProposalValidateEventRequest = new ProposalValidateEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProposalValidateEventResponse$Type extends MessageType<ProposalValidateEventResponse> {
    constructor() {
        super("proposal_create_event_message.ProposalValidateEventResponse", [
            { no: 1, name: "validation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProposalValidateEventResponse>): ProposalValidateEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.validation = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<ProposalValidateEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProposalValidateEventResponse): ProposalValidateEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool validation */ 1:
                    message.validation = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProposalValidateEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool validation = 1; */
        if (message.validation !== false)
            writer.tag(1, WireType.Varint).bool(message.validation);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_create_event_message.ProposalValidateEventResponse
 */
export const ProposalValidateEventResponse = new ProposalValidateEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProposalCacheEventRequest$Type extends MessageType<ProposalCacheEventRequest> {
    constructor() {
        super("proposal_create_event_message.ProposalCacheEventRequest", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "proposer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProposalCacheEventRequest>): ProposalCacheEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.proposer = "";
        message.duration = 0;
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial<ProposalCacheEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProposalCacheEventRequest): ProposalCacheEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* string proposer */ 2:
                    message.proposer = reader.string();
                    break;
                case /* uint32 duration */ 3:
                    message.duration = reader.uint32();
                    break;
                case /* repeated string options */ 4:
                    message.options.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProposalCacheEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* string proposer = 2; */
        if (message.proposer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.proposer);
        /* uint32 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).uint32(message.duration);
        /* repeated string options = 4; */
        for (let i = 0; i < message.options.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.options[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_create_event_message.ProposalCacheEventRequest
 */
export const ProposalCacheEventRequest = new ProposalCacheEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProposalCacheEventResponse$Type extends MessageType<ProposalCacheEventResponse> {
    constructor() {
        super("proposal_create_event_message.ProposalCacheEventResponse", [
            { no: 1, name: "cached", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProposalCacheEventResponse>): ProposalCacheEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cached = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<ProposalCacheEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProposalCacheEventResponse): ProposalCacheEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool cached */ 1:
                    message.cached = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProposalCacheEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool cached = 1; */
        if (message.cached !== false)
            writer.tag(1, WireType.Varint).bool(message.cached);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_create_event_message.ProposalCacheEventResponse
 */
export const ProposalCacheEventResponse = new ProposalCacheEventResponse$Type();
/**
 * @generated ServiceType for protobuf service proposal_create_event_message.ProposalCreateEventService
 */
export const ProposalCreateEventService = new ServiceType("proposal_create_event_message.ProposalCreateEventService", [
    { name: "ValidateProposalEvent", options: {}, I: ProposalValidateEventRequest, O: ProposalValidateEventResponse },
    { name: "CacheProposalEvent", options: {}, I: ProposalCacheEventRequest, O: ProposalCacheEventResponse }
]);
