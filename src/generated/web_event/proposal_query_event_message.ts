// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "web_event/proposal_query_event_message.proto" (package "proposal_query_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message proposal_query_event_message.Proposal
 */
export interface Proposal {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
    /**
     * @generated from protobuf field: int32 duration = 2
     */
    duration: number;
    /**
     * @generated from protobuf field: bool expired = 3
     */
    expired: boolean;
    /**
     * @generated from protobuf field: proposal_query_event_message.Result result = 4
     */
    result?: Result;
    /**
     * @generated from protobuf field: repeated proposal_query_event_message.BlockHeight block_heights = 5
     */
    blockHeights: BlockHeight[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expired_at = 7
     */
    expiredAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated string options = 8
     */
    options: string[];
}
/**
 * @generated from protobuf message proposal_query_event_message.BlockHeight
 */
export interface BlockHeight {
    /**
     * @generated from protobuf field: int32 height = 1
     */
    height: number;
    /**
     * @generated from protobuf field: int32 length = 2
     */
    length: number;
}
/**
 * @generated from protobuf message proposal_query_event_message.Result
 */
export interface Result {
    /**
     * @generated from protobuf field: int32 count = 1
     */
    count: number;
    /**
     * @generated from protobuf field: map<string, int32> options = 2
     */
    options: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message proposal_query_event_message.GetProposalRequest
 */
export interface GetProposalRequest {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
}
/**
 * @generated from protobuf message proposal_query_event_message.GetProposalResponse
 */
export interface GetProposalResponse {
    /**
     * @generated from protobuf field: bool queried = 1
     */
    queried: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
    /**
     * @generated from protobuf field: proposal_query_event_message.Proposal proposals = 3
     */
    proposals?: Proposal;
}
// @generated message type with reflection information, may provide speed optimized methods
class Proposal$Type extends MessageType<Proposal> {
    constructor() {
        super("proposal_query_event_message.Proposal", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "expired", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "result", kind: "message", T: () => Result },
            { no: 5, name: "block_heights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlockHeight },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "expired_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Proposal>): Proposal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.duration = 0;
        message.expired = false;
        message.blockHeights = [];
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial<Proposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Proposal): Proposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* int32 duration */ 2:
                    message.duration = reader.int32();
                    break;
                case /* bool expired */ 3:
                    message.expired = reader.bool();
                    break;
                case /* proposal_query_event_message.Result result */ 4:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* repeated proposal_query_event_message.BlockHeight block_heights */ 5:
                    message.blockHeights.push(BlockHeight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp expired_at */ 7:
                    message.expiredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiredAt);
                    break;
                case /* repeated string options */ 8:
                    message.options.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Proposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* int32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).int32(message.duration);
        /* bool expired = 3; */
        if (message.expired !== false)
            writer.tag(3, WireType.Varint).bool(message.expired);
        /* proposal_query_event_message.Result result = 4; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated proposal_query_event_message.BlockHeight block_heights = 5; */
        for (let i = 0; i < message.blockHeights.length; i++)
            BlockHeight.internalBinaryWrite(message.blockHeights[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expired_at = 7; */
        if (message.expiredAt)
            Timestamp.internalBinaryWrite(message.expiredAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated string options = 8; */
        for (let i = 0; i < message.options.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.options[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Proposal
 */
export const Proposal = new Proposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHeight$Type extends MessageType<BlockHeight> {
    constructor() {
        super("proposal_query_event_message.BlockHeight", [
            { no: 1, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlockHeight>): BlockHeight {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.height = 0;
        message.length = 0;
        if (value !== undefined)
            reflectionMergePartial<BlockHeight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockHeight): BlockHeight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 height */ 1:
                    message.height = reader.int32();
                    break;
                case /* int32 length */ 2:
                    message.length = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockHeight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 height = 1; */
        if (message.height !== 0)
            writer.tag(1, WireType.Varint).int32(message.height);
        /* int32 length = 2; */
        if (message.length !== 0)
            writer.tag(2, WireType.Varint).int32(message.length);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.BlockHeight
 */
export const BlockHeight = new BlockHeight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Result$Type extends MessageType<Result> {
    constructor() {
        super("proposal_query_event_message.Result", [
            { no: 1, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "options", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value?: PartialMessage<Result>): Result {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = 0;
        message.options = {};
        if (value !== undefined)
            reflectionMergePartial<Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Result): Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* map<string, int32> options */ 2:
                    this.binaryReadMap2(message.options, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: Result["options"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Result["options"] | undefined, val: Result["options"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for proposal_query_event_message.Result.options");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, WireType.Varint).int32(message.count);
        /* map<string, int32> options = 2; */
        for (let k of globalThis.Object.keys(message.options))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.options[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Result
 */
export const Result = new Result$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProposalRequest$Type extends MessageType<GetProposalRequest> {
    constructor() {
        super("proposal_query_event_message.GetProposalRequest", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetProposalRequest>): GetProposalRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<GetProposalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProposalRequest): GetProposalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProposalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.GetProposalRequest
 */
export const GetProposalRequest = new GetProposalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProposalResponse$Type extends MessageType<GetProposalResponse> {
    constructor() {
        super("proposal_query_event_message.GetProposalResponse", [
            { no: 1, name: "queried", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proposals", kind: "message", T: () => Proposal }
        ]);
    }
    create(value?: PartialMessage<GetProposalResponse>): GetProposalResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queried = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<GetProposalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProposalResponse): GetProposalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool queried */ 1:
                    message.queried = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* proposal_query_event_message.Proposal proposals */ 3:
                    message.proposals = Proposal.internalBinaryRead(reader, reader.uint32(), options, message.proposals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProposalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool queried = 1; */
        if (message.queried !== false)
            writer.tag(1, WireType.Varint).bool(message.queried);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* proposal_query_event_message.Proposal proposals = 3; */
        if (message.proposals)
            Proposal.internalBinaryWrite(message.proposals, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.GetProposalResponse
 */
export const GetProposalResponse = new GetProposalResponse$Type();
/**
 * @generated ServiceType for protobuf service proposal_query_event_message.ProposalQueryEventService
 */
export const ProposalQueryEventService = new ServiceType("proposal_query_event_message.ProposalQueryEventService", [
    { name: "GetProposal", options: {}, I: GetProposalRequest, O: GetProposalResponse }
]);
