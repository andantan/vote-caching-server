// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "web_event/proposal_query_event_message.proto" (package "proposal_query_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message proposal_query_event_message.Proposal
 */
export interface Proposal {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
    /**
     * @generated from protobuf field: string proposer = 2
     */
    proposer: string;
    /**
     * @generated from protobuf field: int32 duration = 3
     */
    duration: number;
    /**
     * @generated from protobuf field: bool expired = 4
     */
    expired: boolean;
    /**
     * @generated from protobuf field: proposal_query_event_message.Result result = 5
     */
    result?: Result;
    /**
     * @generated from protobuf field: repeated proposal_query_event_message.BlockHeight block_heights = 6
     */
    blockHeights: BlockHeight[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 7
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expired_at = 8
     */
    expiredAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated string options = 9
     */
    options: string[];
}
/**
 * @generated from protobuf message proposal_query_event_message.BlockHeight
 */
export interface BlockHeight {
    /**
     * @generated from protobuf field: int32 height = 1
     */
    height: number;
    /**
     * @generated from protobuf field: int32 length = 2
     */
    length: number;
}
/**
 * @generated from protobuf message proposal_query_event_message.Result
 */
export interface Result {
    /**
     * @generated from protobuf field: int32 count = 1
     */
    count: number;
    /**
     * @generated from protobuf field: map<string, int32> options = 2
     */
    options: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message proposal_query_event_message.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf field: optional bool expired = 1
     */
    expired?: boolean;
}
/**
 * @generated from protobuf message proposal_query_event_message.Sort
 */
export interface Sort {
    /**
     * @generated from protobuf field: string sortOrder = 1
     */
    sortOrder: string;
    /**
     * @generated from protobuf field: string sortBy = 2
     */
    sortBy: string;
}
/**
 * @generated from protobuf message proposal_query_event_message.Paging
 */
export interface Paging {
    /**
     * @generated from protobuf field: int32 skip = 1
     */
    skip: number;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
}
/**
 * @generated from protobuf message proposal_query_event_message.GetProposalDetailRequest
 */
export interface GetProposalDetailRequest {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
}
/**
 * @generated from protobuf message proposal_query_event_message.GetProposalDetailResponse
 */
export interface GetProposalDetailResponse {
    /**
     * @generated from protobuf field: bool queried = 1
     */
    queried: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
    /**
     * @generated from protobuf field: proposal_query_event_message.Proposal proposal = 3
     */
    proposal?: Proposal;
}
/**
 * @generated from protobuf message proposal_query_event_message.GetFilteredProposalListRequest
 */
export interface GetFilteredProposalListRequest {
    /**
     * @generated from protobuf field: proposal_query_event_message.Filter filter = 1
     */
    filter?: Filter;
    /**
     * @generated from protobuf field: proposal_query_event_message.Sort sort = 2
     */
    sort?: Sort;
    /**
     * @generated from protobuf field: proposal_query_event_message.Paging paging = 3
     */
    paging?: Paging;
}
/**
 * @generated from protobuf message proposal_query_event_message.GetFilteredProposalListResponse
 */
export interface GetFilteredProposalListResponse {
    /**
     * @generated from protobuf field: bool queried = 1
     */
    queried: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
    /**
     * @generated from protobuf field: repeated proposal_query_event_message.Proposal proposal_list = 3
     */
    proposalList: Proposal[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Proposal$Type extends MessageType<Proposal> {
    constructor() {
        super("proposal_query_event_message.Proposal", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "proposer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "expired", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "result", kind: "message", T: () => Result },
            { no: 6, name: "block_heights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlockHeight },
            { no: 7, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "expired_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Proposal>): Proposal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.proposer = "";
        message.duration = 0;
        message.expired = false;
        message.blockHeights = [];
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial<Proposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Proposal): Proposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* string proposer */ 2:
                    message.proposer = reader.string();
                    break;
                case /* int32 duration */ 3:
                    message.duration = reader.int32();
                    break;
                case /* bool expired */ 4:
                    message.expired = reader.bool();
                    break;
                case /* proposal_query_event_message.Result result */ 5:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* repeated proposal_query_event_message.BlockHeight block_heights */ 6:
                    message.blockHeights.push(BlockHeight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Timestamp created_at */ 7:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp expired_at */ 8:
                    message.expiredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiredAt);
                    break;
                case /* repeated string options */ 9:
                    message.options.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Proposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* string proposer = 2; */
        if (message.proposer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.proposer);
        /* int32 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int32(message.duration);
        /* bool expired = 4; */
        if (message.expired !== false)
            writer.tag(4, WireType.Varint).bool(message.expired);
        /* proposal_query_event_message.Result result = 5; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated proposal_query_event_message.BlockHeight block_heights = 6; */
        for (let i = 0; i < message.blockHeights.length; i++)
            BlockHeight.internalBinaryWrite(message.blockHeights[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 7; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expired_at = 8; */
        if (message.expiredAt)
            Timestamp.internalBinaryWrite(message.expiredAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated string options = 9; */
        for (let i = 0; i < message.options.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.options[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Proposal
 */
export const Proposal = new Proposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHeight$Type extends MessageType<BlockHeight> {
    constructor() {
        super("proposal_query_event_message.BlockHeight", [
            { no: 1, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlockHeight>): BlockHeight {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.height = 0;
        message.length = 0;
        if (value !== undefined)
            reflectionMergePartial<BlockHeight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockHeight): BlockHeight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 height */ 1:
                    message.height = reader.int32();
                    break;
                case /* int32 length */ 2:
                    message.length = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockHeight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 height = 1; */
        if (message.height !== 0)
            writer.tag(1, WireType.Varint).int32(message.height);
        /* int32 length = 2; */
        if (message.length !== 0)
            writer.tag(2, WireType.Varint).int32(message.length);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.BlockHeight
 */
export const BlockHeight = new BlockHeight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Result$Type extends MessageType<Result> {
    constructor() {
        super("proposal_query_event_message.Result", [
            { no: 1, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "options", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value?: PartialMessage<Result>): Result {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = 0;
        message.options = {};
        if (value !== undefined)
            reflectionMergePartial<Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Result): Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* map<string, int32> options */ 2:
                    this.binaryReadMap2(message.options, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: Result["options"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Result["options"] | undefined, val: Result["options"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for proposal_query_event_message.Result.options");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, WireType.Varint).int32(message.count);
        /* map<string, int32> options = 2; */
        for (let k of globalThis.Object.keys(message.options))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.options[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Result
 */
export const Result = new Result$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("proposal_query_event_message.Filter", [
            { no: 1, name: "expired", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool expired */ 1:
                    message.expired = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool expired = 1; */
        if (message.expired !== undefined)
            writer.tag(1, WireType.Varint).bool(message.expired);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sort$Type extends MessageType<Sort> {
    constructor() {
        super("proposal_query_event_message.Sort", [
            { no: 1, name: "sortOrder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sortBy", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Sort>): Sort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sortOrder = "";
        message.sortBy = "";
        if (value !== undefined)
            reflectionMergePartial<Sort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sort): Sort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sortOrder */ 1:
                    message.sortOrder = reader.string();
                    break;
                case /* string sortBy */ 2:
                    message.sortBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sortOrder = 1; */
        if (message.sortOrder !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sortOrder);
        /* string sortBy = 2; */
        if (message.sortBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sortBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Sort
 */
export const Sort = new Sort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Paging$Type extends MessageType<Paging> {
    constructor() {
        super("proposal_query_event_message.Paging", [
            { no: 1, name: "skip", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Paging>): Paging {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.skip = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<Paging>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Paging): Paging {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 skip */ 1:
                    message.skip = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Paging, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 skip = 1; */
        if (message.skip !== 0)
            writer.tag(1, WireType.Varint).int32(message.skip);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.Paging
 */
export const Paging = new Paging$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProposalDetailRequest$Type extends MessageType<GetProposalDetailRequest> {
    constructor() {
        super("proposal_query_event_message.GetProposalDetailRequest", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetProposalDetailRequest>): GetProposalDetailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<GetProposalDetailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProposalDetailRequest): GetProposalDetailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProposalDetailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.GetProposalDetailRequest
 */
export const GetProposalDetailRequest = new GetProposalDetailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProposalDetailResponse$Type extends MessageType<GetProposalDetailResponse> {
    constructor() {
        super("proposal_query_event_message.GetProposalDetailResponse", [
            { no: 1, name: "queried", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proposal", kind: "message", T: () => Proposal }
        ]);
    }
    create(value?: PartialMessage<GetProposalDetailResponse>): GetProposalDetailResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queried = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<GetProposalDetailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProposalDetailResponse): GetProposalDetailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool queried */ 1:
                    message.queried = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* proposal_query_event_message.Proposal proposal */ 3:
                    message.proposal = Proposal.internalBinaryRead(reader, reader.uint32(), options, message.proposal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProposalDetailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool queried = 1; */
        if (message.queried !== false)
            writer.tag(1, WireType.Varint).bool(message.queried);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* proposal_query_event_message.Proposal proposal = 3; */
        if (message.proposal)
            Proposal.internalBinaryWrite(message.proposal, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.GetProposalDetailResponse
 */
export const GetProposalDetailResponse = new GetProposalDetailResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFilteredProposalListRequest$Type extends MessageType<GetFilteredProposalListRequest> {
    constructor() {
        super("proposal_query_event_message.GetFilteredProposalListRequest", [
            { no: 1, name: "filter", kind: "message", T: () => Filter },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "paging", kind: "message", T: () => Paging }
        ]);
    }
    create(value?: PartialMessage<GetFilteredProposalListRequest>): GetFilteredProposalListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetFilteredProposalListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFilteredProposalListRequest): GetFilteredProposalListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proposal_query_event_message.Filter filter */ 1:
                    message.filter = Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                case /* proposal_query_event_message.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* proposal_query_event_message.Paging paging */ 3:
                    message.paging = Paging.internalBinaryRead(reader, reader.uint32(), options, message.paging);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFilteredProposalListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proposal_query_event_message.Filter filter = 1; */
        if (message.filter)
            Filter.internalBinaryWrite(message.filter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proposal_query_event_message.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proposal_query_event_message.Paging paging = 3; */
        if (message.paging)
            Paging.internalBinaryWrite(message.paging, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.GetFilteredProposalListRequest
 */
export const GetFilteredProposalListRequest = new GetFilteredProposalListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFilteredProposalListResponse$Type extends MessageType<GetFilteredProposalListResponse> {
    constructor() {
        super("proposal_query_event_message.GetFilteredProposalListResponse", [
            { no: 1, name: "queried", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proposal_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Proposal }
        ]);
    }
    create(value?: PartialMessage<GetFilteredProposalListResponse>): GetFilteredProposalListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queried = false;
        message.status = "";
        message.proposalList = [];
        if (value !== undefined)
            reflectionMergePartial<GetFilteredProposalListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFilteredProposalListResponse): GetFilteredProposalListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool queried */ 1:
                    message.queried = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* repeated proposal_query_event_message.Proposal proposal_list */ 3:
                    message.proposalList.push(Proposal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFilteredProposalListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool queried = 1; */
        if (message.queried !== false)
            writer.tag(1, WireType.Varint).bool(message.queried);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* repeated proposal_query_event_message.Proposal proposal_list = 3; */
        for (let i = 0; i < message.proposalList.length; i++)
            Proposal.internalBinaryWrite(message.proposalList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proposal_query_event_message.GetFilteredProposalListResponse
 */
export const GetFilteredProposalListResponse = new GetFilteredProposalListResponse$Type();
/**
 * @generated ServiceType for protobuf service proposal_query_event_message.ProposalQueryEventService
 */
export const ProposalQueryEventService = new ServiceType("proposal_query_event_message.ProposalQueryEventService", [
    { name: "GetProposalDetail", options: {}, I: GetProposalDetailRequest, O: GetProposalDetailResponse },
    { name: "GetFilteredProposalList", options: {}, I: GetFilteredProposalListRequest, O: GetFilteredProposalListResponse }
]);
