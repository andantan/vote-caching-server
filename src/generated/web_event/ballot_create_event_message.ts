// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "web_event/ballot_create_event_message.proto" (package "ballot_create_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ballot_create_event_message.BallotValidateEventRequest
 */
export interface BallotValidateEventRequest {
    /**
     * @generated from protobuf field: string user_hash = 1
     */
    userHash: string;
    /**
     * @generated from protobuf field: string topic = 2
     */
    topic: string;
    /**
     * @generated from protobuf field: string option = 3
     */
    option: string;
}
/**
 * @generated from protobuf message ballot_create_event_message.BallotValidateEventResponse
 */
export interface BallotValidateEventResponse {
    /**
     * @generated from protobuf field: bool validation = 1
     */
    validation: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
}
/**
 * @generated from protobuf message ballot_create_event_message.BallotCacheEventRequest
 */
export interface BallotCacheEventRequest {
    /**
     * @generated from protobuf field: string user_hash = 1
     */
    userHash: string;
    /**
     * @generated from protobuf field: string vote_hash = 2
     */
    voteHash: string;
    /**
     * @generated from protobuf field: string topic = 3
     */
    topic: string;
}
/**
 * @generated from protobuf message ballot_create_event_message.BallotCacheEventResponse
 */
export interface BallotCacheEventResponse {
    /**
     * @generated from protobuf field: bool cached = 1
     */
    cached: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BallotValidateEventRequest$Type extends MessageType<BallotValidateEventRequest> {
    constructor() {
        super("ballot_create_event_message.BallotValidateEventRequest", [
            { no: 1, name: "user_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "option", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BallotValidateEventRequest>): BallotValidateEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userHash = "";
        message.topic = "";
        message.option = "";
        if (value !== undefined)
            reflectionMergePartial<BallotValidateEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BallotValidateEventRequest): BallotValidateEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_hash */ 1:
                    message.userHash = reader.string();
                    break;
                case /* string topic */ 2:
                    message.topic = reader.string();
                    break;
                case /* string option */ 3:
                    message.option = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BallotValidateEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_hash = 1; */
        if (message.userHash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userHash);
        /* string topic = 2; */
        if (message.topic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topic);
        /* string option = 3; */
        if (message.option !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.option);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_create_event_message.BallotValidateEventRequest
 */
export const BallotValidateEventRequest = new BallotValidateEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BallotValidateEventResponse$Type extends MessageType<BallotValidateEventResponse> {
    constructor() {
        super("ballot_create_event_message.BallotValidateEventResponse", [
            { no: 1, name: "validation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BallotValidateEventResponse>): BallotValidateEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.validation = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<BallotValidateEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BallotValidateEventResponse): BallotValidateEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool validation */ 1:
                    message.validation = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BallotValidateEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool validation = 1; */
        if (message.validation !== false)
            writer.tag(1, WireType.Varint).bool(message.validation);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_create_event_message.BallotValidateEventResponse
 */
export const BallotValidateEventResponse = new BallotValidateEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BallotCacheEventRequest$Type extends MessageType<BallotCacheEventRequest> {
    constructor() {
        super("ballot_create_event_message.BallotCacheEventRequest", [
            { no: 1, name: "user_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vote_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BallotCacheEventRequest>): BallotCacheEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userHash = "";
        message.voteHash = "";
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<BallotCacheEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BallotCacheEventRequest): BallotCacheEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_hash */ 1:
                    message.userHash = reader.string();
                    break;
                case /* string vote_hash */ 2:
                    message.voteHash = reader.string();
                    break;
                case /* string topic */ 3:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BallotCacheEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_hash = 1; */
        if (message.userHash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userHash);
        /* string vote_hash = 2; */
        if (message.voteHash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voteHash);
        /* string topic = 3; */
        if (message.topic !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_create_event_message.BallotCacheEventRequest
 */
export const BallotCacheEventRequest = new BallotCacheEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BallotCacheEventResponse$Type extends MessageType<BallotCacheEventResponse> {
    constructor() {
        super("ballot_create_event_message.BallotCacheEventResponse", [
            { no: 1, name: "cached", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BallotCacheEventResponse>): BallotCacheEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cached = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<BallotCacheEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BallotCacheEventResponse): BallotCacheEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool cached */ 1:
                    message.cached = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BallotCacheEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool cached = 1; */
        if (message.cached !== false)
            writer.tag(1, WireType.Varint).bool(message.cached);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_create_event_message.BallotCacheEventResponse
 */
export const BallotCacheEventResponse = new BallotCacheEventResponse$Type();
/**
 * @generated ServiceType for protobuf service ballot_create_event_message.BallotCreateEventService
 */
export const BallotCreateEventService = new ServiceType("ballot_create_event_message.BallotCreateEventService", [
    { name: "ValidateBallotEvent", options: {}, I: BallotValidateEventRequest, O: BallotValidateEventResponse },
    { name: "CacheBallotEvent", options: {}, I: BallotCacheEventRequest, O: BallotCacheEventResponse }
]);
