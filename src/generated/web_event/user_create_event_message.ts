// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "web_event/user_create_event_message.proto" (package "user_create_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message user_create_event_message.UserValidateEventRequest
 */
export interface UserValidateEventRequest {
    /**
     * @generated from protobuf field: int64 uid = 1
     */
    uid: bigint;
    /**
     * @generated from protobuf field: string user_hash = 2
     */
    userHash: string;
}
/**
 * @generated from protobuf message user_create_event_message.UserValidateEventResponse
 */
export interface UserValidateEventResponse {
    /**
     * @generated from protobuf field: bool validation = 1
     */
    validation: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
}
/**
 * @generated from protobuf message user_create_event_message.UserCacheEventRequest
 */
export interface UserCacheEventRequest {
    /**
     * @generated from protobuf field: int64 uid = 1
     */
    uid: bigint;
    /**
     * @generated from protobuf field: string user_hash = 2
     */
    userHash: string;
    /**
     * @generated from protobuf field: string gender = 3
     */
    gender: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp birth_date = 4
     */
    birthDate?: Timestamp;
}
/**
 * @generated from protobuf message user_create_event_message.UserCacheEventResponse
 */
export interface UserCacheEventResponse {
    /**
     * @generated from protobuf field: bool cached = 1
     */
    cached: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
    /**
     * @generated from protobuf field: int64 uid = 3
     */
    uid: bigint;
    /**
     * @generated from protobuf field: string user_hash = 4
     */
    userHash: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserValidateEventRequest$Type extends MessageType<UserValidateEventRequest> {
    constructor() {
        super("user_create_event_message.UserValidateEventRequest", [
            { no: 1, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserValidateEventRequest>): UserValidateEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = 0n;
        message.userHash = "";
        if (value !== undefined)
            reflectionMergePartial<UserValidateEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserValidateEventRequest): UserValidateEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 uid */ 1:
                    message.uid = reader.int64().toBigInt();
                    break;
                case /* string user_hash */ 2:
                    message.userHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserValidateEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 uid = 1; */
        if (message.uid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.uid);
        /* string user_hash = 2; */
        if (message.userHash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_create_event_message.UserValidateEventRequest
 */
export const UserValidateEventRequest = new UserValidateEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserValidateEventResponse$Type extends MessageType<UserValidateEventResponse> {
    constructor() {
        super("user_create_event_message.UserValidateEventResponse", [
            { no: 1, name: "validation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserValidateEventResponse>): UserValidateEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.validation = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<UserValidateEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserValidateEventResponse): UserValidateEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool validation */ 1:
                    message.validation = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserValidateEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool validation = 1; */
        if (message.validation !== false)
            writer.tag(1, WireType.Varint).bool(message.validation);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_create_event_message.UserValidateEventResponse
 */
export const UserValidateEventResponse = new UserValidateEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCacheEventRequest$Type extends MessageType<UserCacheEventRequest> {
    constructor() {
        super("user_create_event_message.UserCacheEventRequest", [
            { no: 1, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "birth_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<UserCacheEventRequest>): UserCacheEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = 0n;
        message.userHash = "";
        message.gender = "";
        if (value !== undefined)
            reflectionMergePartial<UserCacheEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserCacheEventRequest): UserCacheEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 uid */ 1:
                    message.uid = reader.int64().toBigInt();
                    break;
                case /* string user_hash */ 2:
                    message.userHash = reader.string();
                    break;
                case /* string gender */ 3:
                    message.gender = reader.string();
                    break;
                case /* google.protobuf.Timestamp birth_date */ 4:
                    message.birthDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.birthDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserCacheEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 uid = 1; */
        if (message.uid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.uid);
        /* string user_hash = 2; */
        if (message.userHash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userHash);
        /* string gender = 3; */
        if (message.gender !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gender);
        /* google.protobuf.Timestamp birth_date = 4; */
        if (message.birthDate)
            Timestamp.internalBinaryWrite(message.birthDate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_create_event_message.UserCacheEventRequest
 */
export const UserCacheEventRequest = new UserCacheEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCacheEventResponse$Type extends MessageType<UserCacheEventResponse> {
    constructor() {
        super("user_create_event_message.UserCacheEventResponse", [
            { no: 1, name: "cached", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserCacheEventResponse>): UserCacheEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cached = false;
        message.status = "";
        message.uid = 0n;
        message.userHash = "";
        if (value !== undefined)
            reflectionMergePartial<UserCacheEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserCacheEventResponse): UserCacheEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool cached */ 1:
                    message.cached = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* int64 uid */ 3:
                    message.uid = reader.int64().toBigInt();
                    break;
                case /* string user_hash */ 4:
                    message.userHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserCacheEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool cached = 1; */
        if (message.cached !== false)
            writer.tag(1, WireType.Varint).bool(message.cached);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* int64 uid = 3; */
        if (message.uid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.uid);
        /* string user_hash = 4; */
        if (message.userHash !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_create_event_message.UserCacheEventResponse
 */
export const UserCacheEventResponse = new UserCacheEventResponse$Type();
/**
 * @generated ServiceType for protobuf service user_create_event_message.UserCreateEventService
 */
export const UserCreateEventService = new ServiceType("user_create_event_message.UserCreateEventService", [
    { name: "ValidateUserEvent", options: {}, I: UserValidateEventRequest, O: UserValidateEventResponse },
    { name: "CacheUserEvent", options: {}, I: UserCacheEventRequest, O: UserCacheEventResponse }
]);
