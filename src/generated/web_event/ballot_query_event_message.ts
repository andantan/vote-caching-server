// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "web_event/ballot_query_event_message.proto" (package "ballot_query_event_message", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message ballot_query_event_message.GetUserBallotsRequest
 */
export interface GetUserBallotsRequest {
    /**
     * @generated from protobuf field: string user_hash = 1
     */
    userHash: string;
}
/**
 * @generated from protobuf message ballot_query_event_message.GetUserBallotsResponse
 */
export interface GetUserBallotsResponse {
    /**
     * @generated from protobuf field: bool queried = 1
     */
    queried: boolean;
    /**
     * @generated from protobuf field: string status = 2
     */
    status: string;
    /**
     * @generated from protobuf field: repeated ballot_query_event_message.Ballot ballots = 3
     */
    ballots: Ballot[];
}
/**
 * @generated from protobuf message ballot_query_event_message.Ballot
 */
export interface Ballot {
    /**
     * @generated from protobuf field: string vote_hash = 1
     */
    voteHash: string;
    /**
     * @generated from protobuf field: string topic = 2
     */
    topic: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp submitted_at = 3
     */
    submittedAt?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetUserBallotsRequest$Type extends MessageType<GetUserBallotsRequest> {
    constructor() {
        super("ballot_query_event_message.GetUserBallotsRequest", [
            { no: 1, name: "user_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserBallotsRequest>): GetUserBallotsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userHash = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserBallotsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserBallotsRequest): GetUserBallotsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_hash */ 1:
                    message.userHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserBallotsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_hash = 1; */
        if (message.userHash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_query_event_message.GetUserBallotsRequest
 */
export const GetUserBallotsRequest = new GetUserBallotsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserBallotsResponse$Type extends MessageType<GetUserBallotsResponse> {
    constructor() {
        super("ballot_query_event_message.GetUserBallotsResponse", [
            { no: 1, name: "queried", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ballots", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Ballot }
        ]);
    }
    create(value?: PartialMessage<GetUserBallotsResponse>): GetUserBallotsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queried = false;
        message.status = "";
        message.ballots = [];
        if (value !== undefined)
            reflectionMergePartial<GetUserBallotsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserBallotsResponse): GetUserBallotsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool queried */ 1:
                    message.queried = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* repeated ballot_query_event_message.Ballot ballots */ 3:
                    message.ballots.push(Ballot.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserBallotsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool queried = 1; */
        if (message.queried !== false)
            writer.tag(1, WireType.Varint).bool(message.queried);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* repeated ballot_query_event_message.Ballot ballots = 3; */
        for (let i = 0; i < message.ballots.length; i++)
            Ballot.internalBinaryWrite(message.ballots[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_query_event_message.GetUserBallotsResponse
 */
export const GetUserBallotsResponse = new GetUserBallotsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ballot$Type extends MessageType<Ballot> {
    constructor() {
        super("ballot_query_event_message.Ballot", [
            { no: 1, name: "vote_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "submitted_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Ballot>): Ballot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.voteHash = "";
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<Ballot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ballot): Ballot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vote_hash */ 1:
                    message.voteHash = reader.string();
                    break;
                case /* string topic */ 2:
                    message.topic = reader.string();
                    break;
                case /* google.protobuf.Timestamp submitted_at */ 3:
                    message.submittedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.submittedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ballot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vote_hash = 1; */
        if (message.voteHash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.voteHash);
        /* string topic = 2; */
        if (message.topic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topic);
        /* google.protobuf.Timestamp submitted_at = 3; */
        if (message.submittedAt)
            Timestamp.internalBinaryWrite(message.submittedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ballot_query_event_message.Ballot
 */
export const Ballot = new Ballot$Type();
/**
 * @generated ServiceType for protobuf service ballot_query_event_message.BallotQueryEventService
 */
export const BallotQueryEventService = new ServiceType("ballot_query_event_message.BallotQueryEventService", [
    { name: "GetUserBallots", options: {}, I: GetUserBallotsRequest, O: GetUserBallotsResponse }
]);
