// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "pending_event_message.proto" (package "pending_event_message", syntax proto3)
// tslint:disable
import { ReportPendingEventResponse } from "./pending_event_message";
import { ExpiredPendingEvent } from "./pending_event_message";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service pending_event_message.ExpiredPendingEventService
 */
export interface IExpiredPendingEventService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: ReportExpiredPendingEvent
     */
    reportExpiredPendingEvent: grpc.handleUnaryCall<ExpiredPendingEvent, ReportPendingEventResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service pending_event_message.ExpiredPendingEventService.
 *
 * Usage: Implement the interface IExpiredPendingEventService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IExpiredPendingEventService = ...
 * server.addService(expiredPendingEventServiceDefinition, service);
 * ```
 */
export const expiredPendingEventServiceDefinition: grpc.ServiceDefinition<IExpiredPendingEventService> = {
    reportExpiredPendingEvent: {
        path: "/pending_event_message.ExpiredPendingEventService/ReportExpiredPendingEvent",
        originalName: "ReportExpiredPendingEvent",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ReportPendingEventResponse.fromBinary(bytes),
        requestDeserialize: bytes => ExpiredPendingEvent.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ReportPendingEventResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ExpiredPendingEvent.toBinary(value))
    }
};
