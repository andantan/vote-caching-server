"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expiredPendingEventServiceDefinition = void 0;
// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1,output_legacy_commonjs
// @generated from protobuf file "pending_event_message.proto" (package "pending_event_message", syntax proto3)
// tslint:disable
const pending_event_message_1 = require("./pending_event_message");
const pending_event_message_2 = require("./pending_event_message");
/**
 * @grpc/grpc-js definition for the protobuf service pending_event_message.ExpiredPendingEventService.
 *
 * Usage: Implement the interface IExpiredPendingEventService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IExpiredPendingEventService = ...
 * server.addService(expiredPendingEventServiceDefinition, service);
 * ```
 */
exports.expiredPendingEventServiceDefinition = {
    reportExpiredPendingEvent: {
        path: "/pending_event_message.ExpiredPendingEventService/ReportExpiredPendingEvent",
        originalName: "ReportExpiredPendingEvent",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => pending_event_message_1.ReportPendingEventResponse.fromBinary(bytes),
        requestDeserialize: bytes => pending_event_message_2.ExpiredPendingEvent.fromBinary(bytes),
        responseSerialize: value => Buffer.from(pending_event_message_1.ReportPendingEventResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(pending_event_message_2.ExpiredPendingEvent.toBinary(value))
    }
};
//# sourceMappingURL=pending_event_message.grpc-server.js.map